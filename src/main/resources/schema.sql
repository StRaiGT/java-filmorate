DROP TABLE IF EXISTS MPA CASCADE;
DROP TABLE IF EXISTS FILMS CASCADE;
DROP TABLE IF EXISTS GENRES CASCADE;
DROP TABLE IF EXISTS FILMS_GENRES CASCADE;
DROP TABLE IF EXISTS DIRECTORS CASCADE;
DROP TABLE IF EXISTS FILMS_DIRECTORS CASCADE;
DROP TABLE IF EXISTS USERS CASCADE;
DROP TABLE IF EXISTS LIKES CASCADE;
DROP TABLE IF EXISTS FRIENDSHIP CASCADE;
DROP TABLE IF EXISTS REVIEWS CASCADE;
DROP TABLE IF EXISTS DISLIKE_REVIEWS CASCADE;
DROP TABLE IF EXISTS LIKES_REVIEWS CASCADE;
DROP TABLE IF EXISTS FEED CASCADE;

CREATE TABLE IF NOT EXISTS MPA
(
    MPA_ID      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME        VARCHAR(50) NOT NULL UNIQUE,
    DESCRIPTION VARCHAR(200)
);

CREATE TABLE IF NOT EXISTS FILMS
(
    FILM_ID      INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME         VARCHAR(50) NOT NULL,
    DESCRIPTION  VARCHAR(200),
    RELEASE_DATE DATE,
    DURATION     INTEGER,
    MPA_ID       INTEGER REFERENCES MPA (MPA_ID)
);

CREATE TABLE IF NOT EXISTS GENRES
(
    GENRE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME     VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS FILMS_GENRES
(
    FILM_ID  INTEGER REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    GENRE_ID INTEGER REFERENCES GENRES (GENRE_ID),
    PRIMARY KEY (FILM_ID, GENRE_ID)
);

CREATE TABLE IF NOT EXISTS DIRECTORS
(
    DIRECTOR_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME        VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS FILMS_DIRECTORS
(
    FILM_ID     INTEGER REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    DIRECTOR_ID INTEGER REFERENCES DIRECTORS (DIRECTOR_ID) ON DELETE CASCADE,
    PRIMARY KEY (FILM_ID, DIRECTOR_ID)
);

CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMAIL    VARCHAR(50) NOT NULL,
    LOGIN    VARCHAR(50) NOT NULL,
    NAME     VARCHAR(50),
    BIRTHDAY DATE
);

CREATE TABLE IF NOT EXISTS LIKES
(
    FILM_ID INTEGER REFERENCES FILMS (FILM_ID) ON DELETE CASCADE,
    USER_ID INTEGER REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    PRIMARY KEY (FILM_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS FRIENDSHIP
(
    USER_ID   INTEGER REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    FRIEND_ID INTEGER REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    PRIMARY KEY (USER_ID, FRIEND_ID)
);

CREATE TABLE IF NOT EXISTS REVIEWS
(
    REVIEW_ID   INTEGER auto_increment
        primary key
        unique,
    CONTENT     CHARACTER VARYING,
    IS_POSITIVE BOOLEAN,
    USER_ID     INTEGER,
    FILM_ID     INTEGER,
    constraint REVIEWS_FILMS_FILM_ID_FK
        foreign key (FILM_ID) references FILMS ON DELETE CASCADE,
    constraint REVIEWS_USERS_USER_ID_FK
        foreign key (USER_ID) references USERS ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS DISLIKE_REVIEWS
(
    REVIEW_ID INTEGER,
    USER_ID   INTEGER,
    constraint DISLIKE_REVIEWS_REVIEWS_ID_FK
        foreign key (REVIEW_ID) references REVIEWS ON DELETE CASCADE,
    constraint DISLIKE_REVIEWS_USERS_USER_ID_FK
        foreign key (USER_ID) references USERS ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS LIKES_REVIEWS
(
    REVIEW_ID INTEGER,
    USER_ID   INTEGER,
    constraint LIKES_REVIEWS_REVIEWS_ID_FK
        foreign key (REVIEW_ID) references REVIEWS ON DELETE CASCADE,
    constraint LIKES_REVIEWS_USERS_USER_ID_FK
        foreign key (USER_ID) references USERS ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS FEED
(
    EVENT_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ENTITY_ID  INTEGER,
    USER_ID    INTEGER REFERENCES USERS (USER_ID) ON DELETE CASCADE,
    timestamp  BIGINT,
    EVENT_TYPE VARCHAR,
    OPERATION  VARCHAR
    );